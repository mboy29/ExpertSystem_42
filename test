[38;2;204;219;253m
----------------------------------------------------------------------------
 ____  _  _  ____  ____  ____  ____      ____  _  _  ____  ____  ____  _  _ 
(  __)( \/ )(  _ \(  __)(  _ \(_  _)___ / ___)( \/ )/ ___)(_  _)(  __)( \/ )
 ) _)  )  (  ) __/ ) _)  )   /  )( (___)\___ \ )  / \___ \  )(   ) _) / \/ \ 
(____)(_/\_)(__)  (____)(__\_) (__)     (____/(__/  (____/ (__) (____)\_)(_/

---------------------------------------------------------- BY MBOY - 42 NICE
[0m

[38;2;204;219;253m[INFO] Verbose mode enabled![0m
[38;2;204;219;253m[INFO] Starting expert system processing...
[0m
[38;2;204;219;253m[INFO] Parsing data from file 'Tests/Valid/and_2.txt'...[0m
[38;2;207;225;185m[SUCCESS] Data parsed successfully.
[0m
[38;2;204;219;253m[INFO] Starting backward chaining...[0m

1.Query:  A
2.Fact:  A
3.Rule:  B => A
4.Stack:  []
THERE B
2.Fact:  B
3.Rule:  B => A
4.Stack:  []
THERE B
THERE False
[38;2;255;255;255m[VERBOSE] Resolving rule: B => A[0m

  - We know that 'B' is False.
    âˆƒ fact: B = False
  - [38;2;255;173;194mFailed to satisfy rule: 'B => A'. Therefore, 'A' remains False.[0m 


4.Results:  {'res': False, 'exp': 'B => A', 'con': 'A'} | A
5. True Facts:  []
6.1.1.This
3.Rule:  D + E => B
4.Stack:  []
THERE D
THERE True
4.Stack:  [True]
THERE E
THERE True
4.Stack:  [True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: D + E => B[0m

  - We know that 'D' is True.
    âˆƒ fact: D = True
  - We know that 'E' is True.
    âˆƒ fact: E = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'D + E => B'. Therefore, 'B' is set to True.[0m


4.Results:  {'res': True, 'exp': 'D + E => B', 'con': 'B'} | B
5. True Facts:  ['B']
5. True Facts:  ['B']
6.1.1.This
6.1.2.Conclusion:  ['B'] | B
6.1.3.Fact Value:  True
THERE True
[38;2;255;255;255m[VERBOSE] Resolving rule: B => A[0m

  - We know that 'B' is True.
    âˆƒ fact: B = True
  - [38;2;207;225;185mRule satisfied 'B => A'. Therefore, 'A' is set to True.[0m


4.Results:  {'res': True, 'exp': 'B => A', 'con': 'A'} | A
5. True Facts:  ['B', 'A']
5. True Facts:  ['B', 'A']
6.1.1.This
6.1.2.Conclusion:  ['A'] | A
6.1.3.Fact Value:  True
10.Results:  {'A': 'True'}
1.Query:  F
2.Fact:  F
3.Rule:  G + H => F
4.Stack:  []
THERE G
2.Fact:  G
3.Rule:  G + H => F
4.Stack:  []
THERE G
THERE False
4.Stack:  [False]
THERE H
2.Fact:  H
3.Rule:  G + H => F
4.Stack:  []
THERE G
THERE False
4.Stack:  [False]
THERE H
THERE False
4.Stack:  [False, False]
[38;2;255;255;255m[VERBOSE] Resolving rule: G + H => F[0m

  - We know that 'G' is False.
    âˆƒ fact: G = False
  - We know that 'H' is False.
    âˆƒ fact: H = False
  - Applying AND: False âˆ§ False â†’ False.
    (False âˆ§ False) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'G + H => F'. Therefore, 'F' remains False.[0m 


4.Results:  {'res': False, 'exp': 'G + H => F', 'con': 'F'} | F
5. True Facts:  ['B', 'A']
6.1.1.This
3.Rule:  G => H
4.Stack:  []
THERE G
THERE False
[38;2;255;255;255m[VERBOSE] Resolving rule: G => H[0m

  - We know that 'G' is False.
    âˆƒ fact: G = False
  - [38;2;255;173;194mFailed to satisfy rule: 'G => H'. Therefore, 'H' remains False.[0m 


4.Results:  {'res': False, 'exp': 'G => H', 'con': 'H'} | H
5. True Facts:  ['B', 'A']
6.1.1.This
7.Resolving:  {'G', 'F'}
THERE False
4.Stack:  [False, False]
[38;2;255;255;255m[VERBOSE] Resolving rule: G + H => F[0m

  - We know that 'G' is False.
    âˆƒ fact: G = False
  - We know that 'H' is False.
    âˆƒ fact: H = False
  - Applying AND: False âˆ§ False â†’ False.
    (False âˆ§ False) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'G + H => F'. Therefore, 'F' remains False.[0m 


4.Results:  {'res': False, 'exp': 'G + H => F', 'con': 'F'} | F
5. True Facts:  ['B', 'A']
6.1.1.This
3.Rule:  I + J => G
4.Stack:  []
THERE I
THERE True
4.Stack:  [True]
THERE J
THERE True
4.Stack:  [True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: I + J => G[0m

  - We know that 'I' is True.
    âˆƒ fact: I = True
  - We know that 'J' is True.
    âˆƒ fact: J = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'I + J => G'. Therefore, 'G' is set to True.[0m


4.Results:  {'res': True, 'exp': 'I + J => G', 'con': 'G'} | G
5. True Facts:  ['B', 'A', 'G']
5. True Facts:  ['B', 'A', 'G']
6.1.1.This
6.1.2.Conclusion:  ['G'] | G
6.1.3.Fact Value:  True
THERE True
4.Stack:  [True]
THERE H
2.Fact:  H
3.Rule:  G + H => F
4.Stack:  []
HERE
THERE G
THERE True
4.Stack:  [True, True]
THERE H
THERE False
4.Stack:  [True, True, False]
[38;2;255;255;255m[VERBOSE] Resolving rule: G + H => F[0m

  - We know that 'G' is True.
    âˆƒ fact: G = True
  - We know that 'G' is True.
    âˆƒ fact: G = True
  - We know that 'H' is False.
    âˆƒ fact: H = False
  - Applying AND: True âˆ§ False â†’ False.
    (True âˆ§ False) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'G + H => F'. Therefore, 'F' remains False.[0m 


4.Results:  {'res': False, 'exp': 'G + H => F', 'con': 'F'} | F
5. True Facts:  ['B', 'A', 'G']
6.1.1.This
3.Rule:  G => H
4.Stack:  []
HERE
THERE G
THERE True
[38;2;255;255;255m[VERBOSE] Resolving rule: G => H[0m

  - We know that 'G' is True.
    âˆƒ fact: G = True
  - We know that 'G' is True.
    âˆƒ fact: G = True
  - [38;2;207;225;185mRule satisfied 'G => H'. Therefore, 'H' is set to True.[0m


4.Results:  {'res': True, 'exp': 'G => H', 'con': 'H'} | H
5. True Facts:  ['B', 'A', 'G', 'H']
5. True Facts:  ['B', 'A', 'G', 'H']
6.1.1.This
6.1.2.Conclusion:  ['H'] | H
6.1.3.Fact Value:  True
THERE True
4.Stack:  [True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: G + H => F[0m

  - We know that 'G' is True.
    âˆƒ fact: G = True
  - We know that 'H' is True.
    âˆƒ fact: H = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'G + H => F'. Therefore, 'F' is set to True.[0m


4.Results:  {'res': True, 'exp': 'G + H => F', 'con': 'F'} | F
5. True Facts:  ['B', 'A', 'G', 'H', 'F']
5. True Facts:  ['B', 'A', 'G', 'H', 'F']
6.1.1.This
6.1.2.Conclusion:  ['F'] | F
6.1.3.Fact Value:  True
10.Results:  {'A': 'True', 'F': 'True'}
1.Query:  K
2.Fact:  K
3.Rule:  L + M => K
4.Stack:  []
THERE L
2.Fact:  L
3.Rule:  L + M => K
4.Stack:  []
THERE L
THERE False
4.Stack:  [False]
THERE M
2.Fact:  M
3.Rule:  L + M => K
4.Stack:  []
THERE L
THERE False
4.Stack:  [False]
THERE M
THERE False
4.Stack:  [False, False]
[38;2;255;255;255m[VERBOSE] Resolving rule: L + M => K[0m

  - We know that 'L' is False.
    âˆƒ fact: L = False
  - We know that 'M' is False.
    âˆƒ fact: M = False
  - Applying AND: False âˆ§ False â†’ False.
    (False âˆ§ False) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'L + M => K'. Therefore, 'K' remains False.[0m 


4.Results:  {'res': False, 'exp': 'L + M => K', 'con': 'K'} | K
5. True Facts:  ['B', 'A', 'G', 'H', 'F']
6.1.1.This
3.Rule:  N => M
4.Stack:  []
THERE N
2.Fact:  N
3.Rule:  O + P => L + N
4.Stack:  []
THERE O
2.Fact:  O
3.Rule:  O + P => L + N
4.Stack:  []
THERE O
THERE False
4.Stack:  [False]
THERE P
THERE True
4.Stack:  [False, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: O + P => L + N[0m

  - We know that 'O' is False.
    âˆƒ fact: O = False
  - We know that 'P' is True.
    âˆƒ fact: P = True
  - Applying AND: False âˆ§ True â†’ False.
    (False âˆ§ True) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'O + P => L + N'. Therefore, 'L + N' remains False.[0m 


4.Results:  {'res': False, 'exp': 'O + P => L + N', 'con': 'L + N'} | L + N
5. True Facts:  ['B', 'A', 'G', 'H', 'F']
6.2.2.Evaluating composite conclusion: L + N, expected result: False
====> 6.2.3.Current values: L = None, N = None, expected result: False
Setting L and N to False to ensure AND evaluates to False.
Setting L to False to ensure AND evaluates to False.
Setting N to False to ensure AND evaluates to False.
THERE True
4.Stack:  [True]
THERE P
THERE True
4.Stack:  [True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: O + P => L + N[0m

  - We know that 'O' is True.
    âˆƒ fact: O = True
  - We know that 'P' is True.
    âˆƒ fact: P = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'O + P => L + N'. Therefore, 'L + N' is set to True.[0m


4.Results:  {'res': True, 'exp': 'O + P => L + N', 'con': 'L + N'} | L + N
5. True Facts:  ['B', 'A', 'G', 'H', 'F']
6.2.2.Evaluating composite conclusion: L + N, expected result: True
====> 6.2.3.Current values: L = False, N = False, expected result: True
THERE True
[38;2;255;255;255m[VERBOSE] Resolving rule: N => M[0m

  - We know that 'N' is True.
    âˆƒ fact: N = True
  - [38;2;207;225;185mRule satisfied 'N => M'. Therefore, 'M' is set to True.[0m


4.Results:  {'res': True, 'exp': 'N => M', 'con': 'M'} | M
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M']
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M']
6.1.1.This
6.1.2.Conclusion:  ['M'] | M
6.1.3.Fact Value:  True
THERE True
4.Stack:  [False, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: L + M => K[0m

  - We know that 'L' is False.
    âˆƒ fact: L = False
  - We know that 'M' is True.
    âˆƒ fact: M = True
  - Applying AND: False âˆ§ True â†’ False.
    (False âˆ§ True) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'L + M => K'. Therefore, 'K' remains False.[0m 


4.Results:  {'res': False, 'exp': 'L + M => K', 'con': 'K'} | K
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M']
6.1.1.This
3.Rule:  O + P => L + N
4.Stack:  []
THERE O
2.Fact:  O
3.Rule:  O + P => L + N
4.Stack:  []
THERE O
THERE False
4.Stack:  [False]
THERE P
THERE True
4.Stack:  [False, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: O + P => L + N[0m

  - We know that 'O' is False.
    âˆƒ fact: O = False
  - We know that 'P' is True.
    âˆƒ fact: P = True
  - Applying AND: False âˆ§ True â†’ False.
    (False âˆ§ True) = False
  - [38;2;255;173;194mFailed to satisfy rule: 'O + P => L + N'. Therefore, 'L + N' remains False.[0m 


4.Results:  {'res': False, 'exp': 'O + P => L + N', 'con': 'L + N'} | L + N
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M']
6.2.2.Evaluating composite conclusion: L + N, expected result: False
====> 6.2.3.Current values: L = False, N = True, expected result: False
THERE True
4.Stack:  [True]
THERE P
THERE True
4.Stack:  [True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: O + P => L + N[0m

  - We know that 'O' is True.
    âˆƒ fact: O = True
  - We know that 'P' is True.
    âˆƒ fact: P = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'O + P => L + N'. Therefore, 'L + N' is set to True.[0m


4.Results:  {'res': True, 'exp': 'O + P => L + N', 'con': 'L + N'} | L + N
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M']
6.2.2.Evaluating composite conclusion: L + N, expected result: True
====> 6.2.3.Current values: L = False, N = True, expected result: True
THERE True
4.Stack:  [True]
HERE
THERE M
THERE True
4.Stack:  [True, True, True]
[38;2;255;255;255m[VERBOSE] Resolving rule: L + M => K[0m

  - We know that 'L' is True.
    âˆƒ fact: L = True
  - We know that 'M' is True.
    âˆƒ fact: M = True
  - We know that 'M' is True.
    âˆƒ fact: M = True
  - Applying AND: True âˆ§ True â†’ True.
    (True âˆ§ True) = True
  - [38;2;207;225;185mRule satisfied 'L + M => K'. Therefore, 'K' is set to True.[0m


4.Results:  {'res': True, 'exp': 'L + M => K', 'con': 'K'} | K
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M', 'K']
5. True Facts:  ['B', 'A', 'G', 'H', 'F', 'M', 'K']
6.1.1.This
6.1.2.Conclusion:  ['K'] | K
6.1.3.Fact Value:  True
10.Results:  {'A': 'True', 'F': 'True', 'K': 'True'}
1.Query:  P
10.Results:  {'A': 'True', 'F': 'True', 'K': 'True', 'P': 'True'}
[38;2;207;225;185m[SUCCESS] Backward chaining completed.
[0m
[38;2;204;219;253m[INFO] A: True[0m
[38;2;204;219;253m[INFO] F: True[0m
[38;2;204;219;253m[INFO] K: True[0m
[38;2;204;219;253m[INFO] P: True[0m
